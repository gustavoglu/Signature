@page "/"
@using Signature.App.Pages
@using Signature.Shared
@using System.Security.Cryptography
@using System.Text

@inject IJSRuntime JS;
@inject IHttpClientFactory HttpClientFactory;
@implements IAsyncDisposable;

<div class="mb-3">
    <label class="form-label">Numero da Nota Fiscal</label>
    <InputText @bind-Value="NFNumber" class="form-control"></InputText>
</div>

<h1>Assine aqui:</h1>

<canvas style="background-color: lightgrey " height="150" width="300"></canvas>

<div style="display:flex;gap:5px;justify-content:space-between;">
    <button class="btn btn-text" @onclick="Clear">Limpar</button>
</div>


<h1>Foto</h1>
<div class="mb-3" style="display:flex;flex-direction:column;gap:15px;align-items:start;">

    <button class="btn btn-primary" @onclick="TakePhotoAndGenerateBase64"> Tirar Foto</button>

    <img src="@PhotoBase64Src" height="150" />

</div>

<div>
    <button class="btn btn-primary mb-3" @onclick="Send">Enviar</button>
</div>

<div>
    <button class="btn btn-primary mb-3" @onclick="TesteModal">Ler Código de Barras</button>
    <div class="mb-3">
        <label class="form-label">Código de Barras</label>
        <InputText @bind-Value="BarCode" class="form-control"></InputText>
    </div>
</div>
@code {
    HttpClient _httpClient;
    IJSObjectReference module;

    public string? NFNumber { get; set; }

    public string? SignatureBase64 { get; set; }
    public string? SignatureBase64Src { get; set; }

    public string? BarCode { get; set; }

    public string? PhotoBase64 { get; set; }
    public string? PhotoBase64Src { get; set; }

    protected async override Task OnInitializedAsync()
    {
        _httpClient = HttpClientFactory.CreateClient("api");
        module = await JS.InvokeAsync<IJSObjectReference>("import", $"./Components/Pages/Home.razor.js");
        await base.OnInitializedAsync();
    }

    public async Task TesteModal()
    {
        var barCodePage = new BarCodePage();
        barCodePage.BarCodeChanged += OnBarCodeChanged;
        await App.Current.MainPage.Navigation.PushModalAsync(barCodePage);
    }

    public async void OnBarCodeChanged(object? sender, string barCode)
    {
        await InvokeAsync(async () =>
         {
             BarCode = barCode;
             StateHasChanged();
         });

        if (App.Current.MainPage.Navigation.ModalStack.Count > 0)
            await App.Current.MainPage.Navigation.PopModalAsync();
    }

    public async Task Send()
    {
        await GenerateAssignatureBase64();

        if (string.IsNullOrEmpty(SignatureBase64) || string.IsNullOrEmpty(PhotoBase64)) return;

        var body = new SignatureResult(NFNumber, SignatureBase64, PhotoBase64);
        try
        {
            var result = await _httpClient.PostAsJsonAsync("signature", body);
            if (result.IsSuccessStatusCode)
            {
                await App.Current.MainPage.DisplayAlert("Atenção", "Enviado com sucesso!", "Ok");
            }
            else
            {
                await App.Current.MainPage.DisplayAlert("Erro", $"error status {result.StatusCode}", "Ok");
            }
        }
        catch (Exception ex)
        {
            await App.Current.MainPage.DisplayAlert("Erro", $"error: {ex.Message}", "Ok");
        }
    }

    public async Task GenerateAssignatureBase64()
    {
        bool isEmpty = await AssignatureIsEmpty();
        if (isEmpty) return;

        string result = await module.InvokeAsync<string>("getBase64");
        SignatureBase64Src = result;
        SignatureBase64 = result.Split(',')[1];
    }

    public async Task Clear()
    {
        await module.InvokeVoidAsync("clear");
    }

    public async Task<bool> AssignatureIsEmpty()
    {
        return await module.InvokeAsync<bool>("isEmpty");
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }

    public async Task TakePhotoAndGenerateBase64()
    {
        var result = await MediaPicker.CapturePhotoAsync();
        if (result is null) return;
        var streamRead = await result.OpenReadAsync();

        byte[]? bytes = null;

        using (var memoryStream = new MemoryStream())
        {
            streamRead.CopyTo(memoryStream);
            bytes = memoryStream.ToArray();
        }

        PhotoBase64 = Convert.ToBase64String(bytes);
        PhotoBase64Src = $"data:image/jpeg;base64,{PhotoBase64}";
    }
}